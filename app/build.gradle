plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

configurations {
    ktlint
}

android {
    compileSdk 34

    namespace 'com.infbyte.amuzic'

    defaultConfig {
        applicationId "com.infbyte.amuzic"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            storeFile file("amuzic_release_keystore.jks")
            storePassword System.getenv("SIGNING_KEYSTORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [
                appIcon: "@mipmap/ic_amuzic_debug",
                appRoundIcon: "@mipmap/ic_amuzic_debug_round",
                appName: "@string/app_name_debug"
            ]
        }
        release {
            minifyEnabled true
            shrinkResources true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            manifestPlaceholders = [
                appIcon: "@mipmap/ic_amuzic",
                appRoundIcon: "@mipmap/ic_amuzic_round",
                appName: "@string/app_name"
            ]
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {
    implementation 'androidx.compose.material3:material3-android:1.2.1'
    def composeBom = platform('androidx.compose:compose-bom:2023.04.01')
    implementation composeBom
    androidTestImplementation composeBom
    implementation 'androidx.core:core-ktx:1.10.1'

    implementation "androidx.compose.ui:ui"

    implementation 'androidx.compose.foundation:foundation'

    implementation "androidx.compose.ui:ui-tooling-preview"
    implementation "androidx.compose.ui:ui-tooling"

    implementation "androidx.core:core-splashscreen:1.0.1"

    implementation "androidx.navigation:navigation-compose:2.5.3"

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.activity:activity-compose:1.7.1'

    implementation "androidx.media3:media3-exoplayer:1.3.1"
    implementation "androidx.media3:media3-ui:1.3.1"
    implementation "androidx.media3:media3-common:1.3.1"
    implementation 'androidx.media3:media3-session:1.3.1'

    implementation "com.infbyte:amuze:0.2.1"

    implementation 'com.google.dagger:hilt-android:2.44'
    kapt 'com.google.dagger:hilt-compiler:2.44'

    ktlint("com.pinterest:ktlint:0.47.1")

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    debugImplementation "androidx.compose.ui:ui-tooling"
    debugImplementation "androidx.compose.ui:ui-test-manifest"
}

kapt {
    correctErrorTypes true
}

tasks.register('ktlintFormat', JavaExec) {
    mainClass = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args("$rootDir/**/*.kt", "!$rootDir/**/build/**")
    jvmArgs "--add-opens=java.base/java.lang=ALL-UNNAMED"

    if (project.hasProperty("autoCorrect") && project.property("autoCorrect") == "0") {
        logger.quiet("(KTLINT): auto correction is disabled")
    } else {
        logger.quiet("(KTLINT): auto correction is enabled")
        args "-F"
    }
}

tasks.register('ktlintCheck', JavaExec) {
    classpath = configurations.ktlint
    mainClass = "com.pinterest.ktlint.Main"
    args "src/**/*.kt", "**.kts", "!**/build/**"
}

tasks.preBuild.dependsOn ktlintCheck

tasks.ktlintCheck.dependsOn ktlintFormat
